#define EIGEN_USE_GPU
#define EIGEN_USE_HIP

#include <hip/hip_runtime.h>
#include <iostream>
#include <cmath>
#include <unsupported/Eigen/CXX11/Tensor>

template<typename T>
inline bool assertAllClose(const T& x, const T& y, const T rtol, const T atol)
{
  bool all_close = std::abs(x-y) < atol + rtol * std::abs(y) ? 1 : 0;
  if(!all_close)
  {
    std::cerr << "Difference too large wrt tolerance rtol=" << rtol  << ", atol: " << atol << std::endl;
  }

  return all_close;
}

int main()
{
  Eigen::Tensor<double,2> a_h(10,10); 
  Eigen::Tensor<double,2> b_h(10,10); 
  Eigen::Tensor<double,2> x_h(10,10); 
  Eigen::Tensor<double,2> out_h(10,10);
  Eigen::Tensor<double,2> exp_res(10,10);

  a_h.setValues({
    {16.6493854, 19.10638998, 28.69170885, 6.76870131, 31.59568771, 9.41468471,
      18.48853835, 27.08319281, 15.15797277, 59.9324349},
    {48.96226792, 14.63196245,  1.6739125, 11.115989, 49.40391193, 10.11550348,
      5.27002737, 32.71733257,  1.19530106, 15.31204406},
    {52.1707578, 20.97822322, 2.64453268, 1.05610068, 30.39543805, 31.27487513,
      20.0621928, 59.02544599, 18.56486724, 6.95381016},
    {31.75322735, 4.25766174, 18.70724648, 28.40077751, 2.91127442, 30.12896794,
      42.38895521, 57.06891145, 49.16584654, 38.98701064},
    {9.35201339, 34.07730379, 17.58001382, 6.2505709, 28.39231392, 71.03451509,
      32.80307808, 31.14626621, 37.90832305, 18.8918892},
    {8.75771249, 21.37889128, 7.08092618, 3.14801249, 38.47373155, 13.14949731,
      31.50595352, 27.62911683, 10.12131205, 50.4515633},
    {4.21136144, 76.12834637, 36.79802197, 16.1988886, 25.24346509, 28.07800149,
      1.01656897, 29.21219596, 18.28278309, 6.77929283},
    {4.90806074, 14.28336106, 0.88427782, 24.08335288, 48.49426579, 15.91466512,
      1.27111483, 12.73352975, 31.54515955, 11.96470124},
    {16.2042756, 2.14189206, 29.00025245, 44.72675977, 2.5528795, 31.13769929,
      9.92412938,  4.03200257, 58.80185312, 21.31517958},
    {17.64530997, 15.92919886, 21.9910139,  42.06767271, 0.51663124, 33.39168165,
      71.994734, 74.89303405, 39.66842406, 9.10650963}});

  b_h.setValues({
    {25.78411938, 53.79647608, 1.93496305, 11.85608225, 18.48300237, 28.53592436,
      58.76064291, 0.52581244, 18.78100968, 8.39085469}, 
    {7.90816555, 41.18368458, 25.43182807, 4.71379404, 11.90472876, 49.02208218,
      4.70361733, 15.58518525, 27.48631348, 17.96110308}, 
    {8.8167765,  9.53240892, 29.21536278,  6.46427445, 33.24994913, 4.24062051,
      46.74584166, 5.19141952, 12.11407971, 27.69799178},
    {12.1966143,  11.94487204, 39.27931404, 1.77593132, 59.61119714, 48.8847198,
      39.96060658, 4.18079581, 24.09786844, 4.8225534},
    {28.59082537, 35.28444128, 42.32325785, 10.22315249, 3.39882693, 37.35144762,
      31.79673663, 12.70655457, 50.92817356, 15.88451301},
    {23.88970518, 21.72992937, 32.46757181, 35.55302132 ,14.87521888,  9.25501023,
      9.16158362, 19.20699993, 92.30631453, 33.23863432},
    {5.79243876, 32.33152072, 36.77207859, 13.93020499 ,90.61838376, 12.33507777,
      28.53504056, 13.11961536,  1.21982338, 15.91333944},
    {51.98134163, 18.01547114,  0.36134411, 25.72597165 ,14.24670258, 38.2417262,
      18.33073992, 18.15846183, 27.34742698, 47.97250639},
    {3.22519185,  5.38596682, 24.49376196, 34.84579446 ,31.65154899, 11.32557058,
      25.70295194, 52.20044699, 30.08145465, 48.23932248},
    {22.49980003, 63.00272664, 20.98956012, 30.98995107 ,24.06742096,  6.54818897,
      16.84290785, 11.97406035, 55.68463657, 12.32239172}});

  x_h.setConstant(0.1);

  exp_res.setValues({
    {3.24813244e-07, 5.34273595e-05, 4.51631359e-28, 1.53948196e-03,
     3.83716414e-20, 5.62311213e-03, 2.53686321e-04, 1.06922633e-28,
     1.24599698e-07, 1.09701800e-51},
    {1.02520190e-41, 3.67392574e-04, 8.23768122e-01, 5.26931371e-09,
     4.06013393e-39, 5.62189236e-02, 4.47194468e-04, 2.65239426e-22,
     9.22716264e-01, 6.39683500e-08},
    {5.49691913e-44, 3.65142763e-15, 6.92740927e-01, 4.68544563e-01,
     1.06968944e-14, 4.03619167e-28, 3.65675702e-06, 6.02786535e-54,
     4.51031504e-12, 4.79671591e-02},
    {3.91036879e-23, 4.09024434e-02, 2.28268139e-06, 5.45520496e-28,
     9.57439671e-01, 2.11612596e-11, 1.89141987e-21, 3.51335438e-53,
     2.92243218e-32, 5.72107082e-35},
    {6.05403114e-03, 9.23094993e-17, 1.97430994e-05, 1.70802763e-03,
     3.75254435e-26, 1.21941373e-44, 9.20854941e-17, 2.40865468e-22,
     7.75243958e-16, 4.63449518e-11},
    {4.19090418e-03, 3.02210218e-11, 7.94674477e-02, 7.11885383e-01,
     1.41067549e-27, 8.76250694e-09, 1.20055299e-24, 1.05208377e-16,
     5.51211405e-01, 1.17779676e-29},
    {5.37329878e-03, 3.56090407e-51, 2.66571519e-18, 1.27217775e-09,
     1.19743617e-04, 6.85678263e-20, 9.48973145e-01, 1.75494039e-20,
     1.06594350e-18, 5.61728442e-03},
    {6.84582533e-01, 3.28707943e-07, 5.18627930e-02, 3.81830491e-12,
     8.77544968e-37, 4.62030387e-05, 7.89639070e-01, 3.67967522e-06,
     4.32843199e-17, 1.31158427e-02},
    {1.22315582e-14, 1.05211928e-01, 4.81710942e-16, 1.10451011e-24,
     7.56081530e-01, 4.62129362e-23, 1.76616146e-03, 8.11275655e-01,
     1.19065225e-37, 1.27974412e-06},
    {1.72113134e-08, 4.32941050e-03, 6.96632861e-12, 6.64400590e-24,
     9.73629727e-01, 3.48365416e-28, 2.16922392e-56, 9.36115247e-63,
     5.01144331e-16, 5.93134353e-05}});

  std::size_t a_bytes = a_h.size() * sizeof(double);
  std::size_t b_bytes = b_h.size() * sizeof(double);
  std::size_t x_bytes = b_h.size() * sizeof(double);
  std::size_t out_bytes = out_h.size() * sizeof(double);

  double* a_d;
  double* b_d;
  double* x_d;
  double* out_d;

  hipMalloc(&out_d, out_bytes);
  hipMalloc(&a_d, a_bytes);
  hipMalloc(&b_d, b_bytes);
  hipMalloc(&x_d, x_bytes);

  hipMemcpy(a_d, a_h.data(), a_bytes, hipMemcpyHostToDevice);
  hipMemcpy(b_d, b_h.data(), b_bytes, hipMemcpyHostToDevice);
  hipMemcpy(x_d, x_h.data(), x_bytes, hipMemcpyHostToDevice);

  Eigen::GpuStreamDevice stream;
  Eigen::GpuDevice rocm_device = Eigen::GpuDevice(&stream);

  Eigen::TensorMap<Eigen::Tensor<double, 2>, Eigen::Aligned> gpu_a(
      a_d, 10, 10);
  Eigen::TensorMap<Eigen::Tensor<double, 2>, Eigen::Aligned> gpu_b(
      b_d, 10, 10);
  Eigen::TensorMap<Eigen::Tensor<double, 2>, Eigen::Aligned> gpu_x(
      x_d, 10, 10);    
  Eigen::TensorMap<Eigen::Tensor<double, 2>, Eigen::Aligned> gpu_out(
      out_d, 10, 10);


  gpu_out.device(rocm_device) = Eigen::betainc(gpu_a, gpu_b, gpu_x);

  assert(hipMemcpyAsync(out_h.data(), out_d, out_bytes, hipMemcpyDeviceToHost,
                         rocm_device.stream()) == hipSuccess);
  assert(hipStreamSynchronize(rocm_device.stream()) == hipSuccess);

  std::cout << "Inputs - a = (" << a_h << "),\n b = (" << b_h << "),\n x = (" << x_h << ")" << std::endl;
  std::cout << "Result: \n" << out_h << std::endl;

  double rtol = 1e-6;
  double atol = 1e-6;
  for (int i = 0; i < 10; ++i) {
    for (int k = 0; k < 10; ++k) {
      assertAllClose<double>(exp_res(i,k), out_h(i,k), rtol, atol);
    }
  }
}